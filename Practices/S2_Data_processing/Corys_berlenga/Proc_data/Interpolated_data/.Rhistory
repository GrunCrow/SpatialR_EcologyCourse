write.table(df, file="6_LV22760.txt", quote=F, row.names=F, sep="\t") # export the new data into a tab delimited *.txt
# Save the pre-processed files in a different working directory than the sone with the original raw data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data")
write.table(df, file="6_LV22760.txt", quote=F, row.names=F, sep="\t") # export the new data into a tab delimited *.txt
# Define and project the coordinate system of the dataframe you are working one and export it as a KML file
df1 = df
coordinates(df1) = c("Longitude", "Latitude")
proj4string(df1) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
df1 = spTransform(df1, CRS("+proj=longlat +datum=WGS84"))
crs.WGS84 = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
df1_sf <- st_as_sf(df1, coords = c("Longitude", "Latitude"))
st_write(df1_sf, "6_LV22760.kml", driver = "KML")
# Export to a shapefile format to open it in a GIS software
st_write(df1_sf, "6_LV22760.hsp")
# Export to a shapefile format to open it in a GIS software
st_write(df1_sf, "6_LV22760.shp")
# GPS data interpolation by a defined time period
#convert format Date
df$DateGMT<-as.POSIXct(df$DateGMT, "%Y-%m-%d %H:%M:%S")
par(mfrow=c(2,2), las=1)
plot(df$Longitude, df$Latitude, asp=1, type="b", main="Original_trip")
plot(df$DateGMT, df$Latitude, type="b", main="Original_Lat")
#generate an interpolation by a time interval
newdates<-seq(df$DateGMT[1], df$DateGMT[nrow(df)], by=60*10) #by minutes
df_int<-data.frame(Latitude=approx(df$DateGMT, df$Latitude, xout = newdates)$y)
df_int$Longitude<-approx(df$DateGMT, df$Longitude, xout = newdates)$y
df_int$DateGMT<-newdates
plot(df_int$Longitude, df_int$Latitude, asp=1, type="b", pch="+", cex=.8, col=2, main="Interpolated_trip")
plot(df_int$DateGMT, df_int$Latitude, col=2, pch="+", cex=.8, main="10 min interpolation (60*10 sec)")
# Fill interpolated data with the original data
df_int$Bird_ID = "6_LV22760"
df_int$lat_col = 39.4144233 # change the latitude of the colony or population you are study
df_int$long_col = -9.5047317 # change the longitude of the colony or population you are study
df_int$Latitude = as.numeric(as.character(df_int$Latitude))
df_int$Longitude = as.numeric(as.character(df_int$Longitude))
df_int$lat_col = as.numeric(as.character(df_int$lat_col))
df_int$long_col = as.numeric(as.character(df_int$long_col))
# Compute some other metrics that can be useful in the data cleaning or further in the analysis
df_int$dist_col = distGeo(df_int[,c("Longitude","Latitude")], df_int[,c("long_col","lat_col")])/1000 # in km, but you can change the data format
df_int$COL = ifelse( df_int$dist_col < 1, "colony", "sea" ) # in km
df_int$heading = bearing(df_int[,c("Longitude","Latitude")], df_int[,c("long_col","lat_col")])
# Function to convert bearing angle from -180:180 to 0:360
convert_bearing <- function(angle) {
ifelse(angle < 0, angle + 360, angle)
}
# Apply the conversion to the 'heading' column
df_int$heading_360 <- convert_bearing(df_int$heading)
head(df_int)
# Load necessary libraries
library(dplyr)
library(fuzzyjoin)
View(df_int)
# Ensure that DateGMT is in POSIXct format
df <- df %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
df_int <- df_int %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
# Perform the fuzzy join to find the nearest temperature values based on DateGMT
matched_data <- df_int %>%
fuzzy_left_join(df, by = "DateGMT", match_fun = `<=`) %>%
group_by(DateGMT.x) %>%
slice_min(abs(difftime(DateGMT.x, DateGMT.y, units = "mins"))) %>%
ungroup()
# Ensure that DateGMT is in POSIXct format
df <- df %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
df_int <- df_int %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
# Perform the fuzzy join to find the nearest temperature values based on DateGMT
matched_data <- df_int %>%
fuzzy_left_join(df, by = "DateGMT", match_fun = `<=`) %>%
group_by(DateGMT.x) %>%
slice_min(abs(difftime(DateGMT.x, DateGMT.y, units = "mins"))) %>%
ungroup()
# Inspect column names to ensure they exist
names(matched_data)
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
write.table(matched_data,  file="6_LV22760_int10.txt", quote=F, row.names=T, sep="\t")
# List all .txt files in a predefined working directory
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
txt_files <- list.files(pattern = "\\.txt$")
# Read and merge all the txt files into one data frame
merged_data <- do.call(rbind, lapply(txt_files, read.table, header = TRUE, sep = "\t", stringsAsFactors = FALSE))
# Save the merged data into a new file
write.table(merged_data, "merged_data.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
# Plot the trips for each bird;
ggplot(merged_data, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("merged_data.txt", header = T, sep="\t")
head(data)
# Summary stats to check for errors on your dataset
names(merged_data)
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
View(data_trip_char)
data$DateGMT = as.POSIXct(paste(data$DateGMT), format="%d/%m/%Y %H:%M:%S")
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
data$DateGMT <- as.POSIXct(data$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("merged_data.txt", header = T, sep="\t")
head(data)
data$DateGMT <- as.POSIXct(data$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("merged_data.txt", header = T, sep="\t")
head(data)
View(data)
2
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("merged_data.txt", header = T, sep="\t")
head(data)
data$DateGMT <- as.POSIXct(data$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
data$DateGMT <- as.POSIXct(data$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/")
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/")
data = read.table("merged_data.txt", header = T, sep="\t")
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/")
data = read.table("merged_data.txt", header = T, sep="\t")
data = read.table("trips.txt", header = T, sep="\t")
head(data)
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID, Trip_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
write.table(data_trip_char, file="trips_chars_merged_data.txt", quote=F, row.names=F, sep="\t") # export the new data into a tab delimited *.txt
names(df)
head(data)
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
Track_dur = round(max(DateGMT)-min(DateGMT)),
mean_Dcol= mean(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("merged_data.txt", header = T, sep="\t")
head(data)
data$DateGMT <- as.POSIXct(data$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
Track_dur = round(max(DateGMT)-min(DateGMT)),
mean_Dcol= mean(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("trips.txt", header = T, sep="\t")
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class")
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class")
data = read.table("trips.txt", header = T, sep="\t")
head(data)
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID, Trip_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
Track_dur = round(max(DateGMT)-min(DateGMT)),
mean_Dcol= mean(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class")
data = read.table("trips.txt", header = T, sep="\t")
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class")
data = read.table("trips.txt", header = T, sep="\t")
head(data)
data$DateGMT <- as.POSIXct(data$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID, Trip_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
Track_dur = round(max(DateGMT)-min(DateGMT)),
mean_Dcol= mean(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
data$DateGMT <- as.POSIXct(data$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID, Trip_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
Track_dur = round(max(DateGMT)-min(DateGMT)),
mean_Dcol= mean(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
View(data)
View(data)
View(data_trip_char)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("trips.txt", header = T, sep="\t")
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("merged_data.txt", header = T, sep="\t")
head(data)
data$DateGMT <- as.POSIXct(data$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
Track_dur = round(max(DateGMT)-min(DateGMT)),
mean_Dcol= mean(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
View(data_trip_char)
write.table(data_trip_char, file="birds_chars_merged_data.txt", quote=F, row.names=F, sep="\t") # export the new data into a tab delimited *.txt
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
?boobies  # for some background info on the example data set
data(boobies)
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
# here we know that the first points in the data set are from the colony center
colony <- dataGroup %>%
summarise(
Longitude = first(Longitude),
Latitude  = first(Latitude)
)
# In order to do this, you must identify the location(s) of the central place(s) (e.g. colony-center, or nest sites).
colony <- dataGroup %>%
summarise(
Longitude = first(Longitude),
Latitude  = first(Latitude))
str(dataGroup)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = TRUE
)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = TRUE
)
mapTrips(trips = trips, colony = colony)
install.packages("track2KBA")
install.packages("devtools", dependencies = TRUE)
library(track2KBA) # load package
data(boobies)
?boobies  # for some background info on the example data set
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
str(dataGroup)
install.packages("track2KBA")
install.packages("track2KBA")
data(boobies)
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude"
)
# trip split parameters
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = TRUE
)
mapTrips(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
sumTrips
View(sumTrips)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "No" )
sumTrips <- tripSummary(trips = trips, colony = colony)
sumTrips
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
# trip split parameters
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = FALSE)
mapTrips(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
sumTrips
View(sumTrips)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "No" )
sumTrips <- tripSummary(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "No" )
sumTrips <- tripSummary(trips = trips, colony = colony)
sumTrips
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
sumTrips
# trip split parameters
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = TRUE)
mapTrips(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
sumTrips
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "No" )
sumTrips <- tripSummary(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "No" )
sumTrips <- tripSummary(trips = trips)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary.
# First, we can filter out data from trips that did not return to the vicinity of the colony (i.e. within returnBuff), so they don’t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
# trip split parameters
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = TRUE)
sumTrips <- tripSummary(trips = trips, colony = colony)
View(sumTrips)
