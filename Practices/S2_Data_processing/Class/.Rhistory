df_int$COL = ifelse( df_int$dist_col < 1, "colony", "sea" ) # in km
df_int$heading = bearing(df_int[,c("Longitude","Latitude")], df_int[,c("long_col","lat_col")])
# Function to convert bearing angle from -180:180 to 0:360
convert_bearing <- function(angle) {
ifelse(angle < 0, angle + 360, angle)
}
# Apply the conversion to the 'heading' column
df_int$heading_360 <- convert_bearing(df_int$heading)
# Ensure that DateGMT is in POSIXct format
df <- df %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
df_int <- df_int %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
# Perform a fuzzy join function to find the nearest temperature values based on DateGMT
fuzzy_join_df <- df_int %>%
fuzzy_left_join(df, by = "DateGMT", match_fun = `<=`) %>%
group_by(DateGMT.x) %>%
slice_min(abs(difftime(DateGMT.x, DateGMT.y, units = "mins"))) %>%
ungroup()
# Save the new merged file with the two datasets
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
write.table(fuzzy_join_df,  file="1_L91287.txt", quote=F, row.names=T, sep="\t")
# List all .txt files in a predefined working directory
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
txt_files <- list.files(pattern = "\\.txt$")
# Read and merge all the txt files into one data frame
merged_data <- do.call(rbind, lapply(txt_files, read.table, header = TRUE, sep = "\t", stringsAsFactors = FALSE))
# Save the merged data into a new file
write.table(merged_data, "merged_data.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
merged_data_clean = read.table("merged_data.txt", header = T, sep="\t")
head(merged_data_clean)
# Plot the trips for each bird;
ggplot(merged_data_clean, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
# Summary stats for Bird_ID - usfeul to check for errors on our dataset
data_trip_char = ddply(merged_data_clean, .(Bird_ID), summarise,
min_Date = min(DateGMT_num, na.rm=T),
max_Date = max(DateGMT_num, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT_num)-min(DateGMT_num)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
sd_Temperature= sd(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T),
sd_Speed= sd(Speed, na.rm=T))
head(merged_data_clean)
# Summary stats for Bird_ID - useful to check for errors on our dataset
data_trip_char = ddply(merged_data_clean, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
sd_Temperature= sd(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T),
sd_Speed= sd(Speed, na.rm=T))
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
merged_data_clean = read.table("merged_data.txt", header = T, sep="\t")
head(merged_data_clean)
# Plot the trips for each bird;
ggplot(merged_data_clean, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
# Summary stats for Bird_ID - useful to check for errors on our dataset
data_trip_char = ddply(merged_data_clean, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
sd_Temperature= sd(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T),
sd_Speed= sd(Speed, na.rm=T))
head(data_trip_char)
View(data_trip_char)
# Import a testing dataset from the trips
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/")
trip_data_example = read.table("Teste_trips.txt", header = T, sep="\t")
head(trip_data_example)
# Summary stats for Trip_ID
data_trip_char = ddply(trip_data_example, .(Bird_ID, Trip_ID), summarise,
min_Date = min(DateGMT_num, na.rm=T),
max_Date = max(DateGMT_num, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT_num)-min(DateGMT_num)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
sd_Temperature= sd(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T),
sd_Speed= sd(Speed, na.rm=T))
# Summary stats for Trip_ID
data_trip_char = ddply(trip_data_example, .(Bird_ID, Trip_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
sd_Temperature= sd(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T),
sd_Speed= sd(Speed, na.rm=T))
head(data_trip_char)
install.packages("track2KBA")
install.packages("track2KBA")
install.packages('track2KBA') # functions for preparing and analyzing animal tracking data
# First, in order for the data to work in track2KBA functions, we can use the formatFields function to format the
# important data columns needed for analysis. These are: a DateTime field, Latitude and Longitude fields, and an ID
# field (i.e. individual animal, track, or trip).
data(boobies)
library(track2KBA)
library(lubridate)
library(geosphere)
library(sp)
library(sf)
library(shapefiles)
library(dplyr)
library(lubridate)
library(ggplot2)
library(plyr)
library(fuzzyjoin)
library(track2KBA)
# First, in order for the data to work in track2KBA functions, we can use the formatFields function to format the
# important data columns needed for analysis. These are: a DateTime field, Latitude and Longitude fields, and an ID
# field (i.e. individual animal, track, or trip).
data(boobies)
?boobies  # for some background info on the example data set
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude")
str(dataGroup)
# here we know that the first points in the data set are from the colony center
colony <- dataGroup %>%
summarise(
Longitude = first(Longitude),
Latitude  = first(Latitude))
# Optionally, we can set rmNonTrip to TRUE which will remove the periods when the animals were not on trips.
# The results of tripSplit can be plotted using mapTrips to see some examples of trips.
str(dataGroup)
View(boobies)
View(boobies)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = TRUE)
mapTrips(trips = trips, colony = colony)
sumTrips <- tripSummary(trips = trips, colony = colony)
sumTrips
View(sumTrips)
# track2KBA uses Kernel Density Estimation (KDE) to produce space use estimates for each individual track.
# In order for these to be accurate, we need to transform the tracking data to an equal-area projection.
# We can use the convenience function projectTracks to perform this projection.
# We can select between an azimuthal or cylindrical projection, and decide whether to center the projection on the data
# itself. Custom-centering is generally a good idea for quick analyses as this will minimize distortion,
# however it is important to remember that the resulting projection will be data specific.
# So if you remove even one track and re-analyze, the projection will differ between datasets.
# For formal analysis, the best solution is to find a standard projection that is appropriate for your study region.
tracks <- projectTracks( dataGroup = trips, projType = 'azim', custom=TRUE )
class(tracks)
# If we know our animal uses an area-restricted search (ARS) strategy to locate prey, then we can set the scaleARS=TRUE.
# This uses First Passage Time analysis to identify the spatial scale at which area-restricted search is occuring,
# which may then be used as the smoothing parameter value.
hVals <- findScale(
tracks   = tracks,
scaleARS = TRUE,
sumTrips = sumTrips)
hVals
# Note: here we might want to remove the trip start and end points that fall within the innerBuff (i.e. 3 km) we
# set in tripSplit, so that they donâ€™t skew the at-sea distribution towards to colony.
tracks <- tracks[tracks$ColDist > 3, ] # remove trip start and end points near colony
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$href,
levelUD = 50,
polyOut = TRUE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$scaleARS,
levelUD = 50,
polyOut = TRUE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
# By quantifying this relationship, we can estimate how close we are to an information asymptote.
# Put another way, we have estimated how much new space use information would be added by tracking more animals.
# In the case of this seabird dataset, we estimate that ~98% of the core areas used by this population are captured
# by the sample of 39 individuals. Highly representative!
repr <- repAssess(
tracks    = tracks,
KDE       = KDE$KDE.Surface,
levelUD   = 50,
iteration = 1,
bootTable = FALSE)
# By quantifying this relationship, we can estimate how close we are to an information asymptote.
# Put another way, we have estimated how much new space use information would be added by tracking more animals.
# In the case of this seabird dataset, we estimate that ~98% of the core areas used by this population are captured
# by the sample of 39 individuals. Highly representative!
repr <- repAssess(
tracks    = tracks,
KDE       = KDE$KDE.Surface,
levelUD   = 50,
iteration = 1,
bootTable = FALSE)
# By quantifying this relationship, we can estimate how close we are to an information asymptote.
# Put another way, we have estimated how much new space use information would be added by tracking more animals.
# In the case of this seabird dataset, we estimate that ~98% of the core areas used by this population are captured
# by the sample of 39 individuals. Highly representative!
repr <- repAssess(
tracks    = tracks,
KDE       = KDE$KDE.Surface,
levelUD   = 50,
iteration = 1,
bootTable = FALSE)
# By quantifying this relationship, we can estimate how close we are to an information asymptote.
# Put another way, we have estimated how much new space use information would be added by tracking more animals.
# In the case of this seabird dataset, we estimate that ~98% of the core areas used by this population are captured
# by the sample of 39 individuals. Highly representative!
repr <- repAssess(
tracks    = tracks,
KDE       = KDE$KDE.Surface,
levelUD   = 50,
iteration = 10,
bootTable = FALSE)
# If you desire polygon output of the overlap areas, instead of a gridded surface, you can indicate this using the
# polyOut argument.
Site <- findSite(
KDE = KDE$KDE.Surface,
represent = repr$out,
levelUD = 50,
#popSize = 500,     # 500 individual seabirds breed one the island
polyOut = FALSE)
class(Site)
Site
# If you desire polygon output of the overlap areas, instead of a gridded surface, you can indicate this using the
# polyOut argument.
Site <- findSite(
KDE = KDE$KDE.Surface,
represent = repr$out,
levelUD = 50,
popSize = 500,     # 500 individual seabirds breed one the island
polyOut = FALSE)
Sitemap <- mapSite(Site, colony = colony)
# If you desire polygon output of the overlap areas, instead of a gridded surface, you can indicate this using the
# polyOut argument.
Site <- findSite(
KDE = KDE$KDE.Surface,
represent = repr$out,
levelUD = 50,
# popSize = 500,     # 500 individual seabirds breed one the island
polyOut = FALSE)
# If you desire polygon output of the overlap areas, instead of a gridded surface, you can indicate this using the
# polyOut argument.
Site <- findSite(
KDE = KDE$KDE.Surface,
represent = repr$out,
levelUD = 50,
#popSize = 500,     # 500 individual seabirds breed one the island
polyOut = FALSE)
class(Site)
# This plot shows the minimum estimated number of birds using the space around the breeding island.
Sitemap <- mapSite(Site, colony = colony)
library(lubridate)
library(geosphere)
library(sp)
library(sf)
library(shapefiles)
library(dplyr)
library(lubridate)
library(ggplot2)
library(plyr)
library(fuzzyjoin)
library(track2KBA)
# First, in order for the data to work in track2KBA functions, we can use the formatFields function to format the
# important data columns needed for analysis. These are: a DateTime field, Latitude and Longitude fields, and an ID
# field (i.e. individual animal, track, or trip).
data(boobies)
# First, in order for the data to work in track2KBA functions, we can use the formatFields function to format the
# important data columns needed for analysis. These are: a DateTime field, Latitude and Longitude fields, and an ID
# field (i.e. individual animal, track, or trip).
data(boobies)
?boobies  # for some background info on the example data set
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude")
str(dataGroup)
View(boobies)
# here we know that the first points in the data set are from the colony center
colony <- dataGroup %>%
summarise(
Longitude = first(Longitude),
Latitude  = first(Latitude))
# Optionally, we can set rmNonTrip to TRUE which will remove the periods when the animals were not on trips.
# The results of tripSplit can be plotted using mapTrips to see some examples of trips.
str(dataGroup)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = TRUE)
mapTrips(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary. First, we can filter out data from trips that did not
# return to the vicinity of the colony (i.e. within returnBuff), so they donâ€™t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary. First, we can filter out data from trips that did not
# return to the vicinity of the colony (i.e. within returnBuff), so they donâ€™t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
sumTrips
View(sumTrips)
# track2KBA uses Kernel Density Estimation (KDE) to produce space use estimates for each individual track.
# In order for these to be accurate, we need to transform the tracking data to an equal-area projection.
# We can use the convenience function projectTracks to perform this projection.
# We can select between an azimuthal or cylindrical projection, and decide whether to center the projection on the data
# itself. Custom-centering is generally a good idea for quick analyses as this will minimize distortion,
# however it is important to remember that the resulting projection will be data specific.
# So if you remove even one track and re-analyze, the projection will differ between datasets.
# For formal analysis, the best solution is to find a standard projection that is appropriate for your study region.
tracks <- projectTracks( dataGroup = trips, projType = 'azim', custom=TRUE )
hVals
# track2KBA uses Kernel Density Estimation (KDE) to produce space use estimates for each individual track.
# In order for these to be accurate, we need to transform the tracking data to an equal-area projection.
# We can use the convenience function projectTracks to perform this projection.
# We can select between an azimuthal or cylindrical projection, and decide whether to center the projection on the data
# itself. Custom-centering is generally a good idea for quick analyses as this will minimize distortion,
# however it is important to remember that the resulting projection will be data specific.
# So if you remove even one track and re-analyze, the projection will differ between datasets.
# For formal analysis, the best solution is to find a standard projection that is appropriate for your study region.
tracks <- projectTracks( dataGroup = trips, projType = 'azim', custom=TRUE )
class(tracks)
# If we know our animal uses an area-restricted search (ARS) strategy to locate prey, then we can set the scaleARS=TRUE.
# This uses First Passage Time analysis to identify the spatial scale at which area-restricted search is occuring,
# which may then be used as the smoothing parameter value.
hVals <- findScale(
tracks   = tracks,
scaleARS = TRUE,
sumTrips = sumTrips)
hVals
mapKDE(KDE = KDE$UDPolygons, colony = colony)
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$scaleARS,
levelUD = 50,
polyOut = TRUE)
# Note: here we might want to remove the trip start and end points that fall within the innerBuff (i.e. 3 km) we
# set in tripSplit, so that they donâ€™t skew the at-sea distribution towards to colony.
tracks <- tracks[tracks$ColDist > 3, ] # remove trip start and end points near colony
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 50,
polyOut = TRUE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
# By quantifying this relationship, we can estimate how close we are to an information asymptote.
# Put another way, we have estimated how much new space use information would be added by tracking more animals.
# In the case of this seabird dataset, we estimate that ~98% of the core areas used by this population are captured
# by the sample of 39 individuals. Highly representative!
repr <- repAssess(
tracks    = tracks,
KDE       = KDE$KDE.Surface,
levelUD   = 50,
iteration = 1,
bootTable = FALSE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 95,
polyOut = TRUE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 50,
polyOut = TRUE)
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 50,
polyOut = FALSE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
# First, in order for the data to work in track2KBA functions, we can use the formatFields function to format the
# important data columns needed for analysis. These are: a DateTime field, Latitude and Longitude fields, and an ID
# field (i.e. individual animal, track, or trip).
data(boobies)
?boobies  # for some background info on the example data set
dataGroup <- formatFields(
dataGroup = boobies,
fieldID   = "track_id",
fieldDate = "date_gmt",
fieldTime = "time_gmt",
fieldLon  = "longitude",
fieldLat  = "latitude")
str(dataGroup)
# here we know that the first points in the data set are from the colony center
colony <- dataGroup %>%
summarise(
Longitude = first(Longitude),
Latitude  = first(Latitude))
# Optionally, we can set rmNonTrip to TRUE which will remove the periods when the animals were not on trips.
# The results of tripSplit can be plotted using mapTrips to see some examples of trips.
str(dataGroup)
trips <- tripSplit(
dataGroup  = dataGroup,
colony     = colony,
innerBuff  = 3,      # kilometers
returnBuff = 10,
duration   = 1,      # hours
rmNonTrip  = TRUE)
mapTrips(trips = trips, colony = colony)
# Then we can summarize the trip movements, using tripSummary. First, we can filter out data from trips that did not
# return to the vicinity of the colony (i.e. within returnBuff), so they donâ€™t skew the estimates.
trips <- subset(trips, trips$Returns == "Yes" )
sumTrips <- tripSummary(trips = trips, colony = colony)
sumTrips
# track2KBA uses Kernel Density Estimation (KDE) to produce space use estimates for each individual track.
# In order for these to be accurate, we need to transform the tracking data to an equal-area projection.
# We can use the convenience function projectTracks to perform this projection.
# We can select between an azimuthal or cylindrical projection, and decide whether to center the projection on the data
# itself. Custom-centering is generally a good idea for quick analyses as this will minimize distortion,
# however it is important to remember that the resulting projection will be data specific.
# So if you remove even one track and re-analyze, the projection will differ between datasets.
# For formal analysis, the best solution is to find a standard projection that is appropriate for your study region.
tracks <- projectTracks( dataGroup = trips, projType = 'azim', custom=TRUE )
class(tracks)
# If we know our animal uses an area-restricted search (ARS) strategy to locate prey, then we can set the scaleARS=TRUE.
# This uses First Passage Time analysis to identify the spatial scale at which area-restricted search is occuring,
# which may then be used as the smoothing parameter value.
hVals <- findScale(
tracks   = tracks,
scaleARS = TRUE,
sumTrips = sumTrips)
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 50,
polyOut = TRUE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 95,
polyOut = TRUE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
hVals
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$href,
levelUD = 95,
polyOut = TRUE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
KDE <- estSpaceUse(
tracks = tracks,
scale = hVals$mag,
levelUD = 50,
polyOut = TRUE)
mapKDE(KDE = KDE$UDPolygons, colony = colony)
# By quantifying this relationship, we can estimate how close we are to an information asymptote.
# Put another way, we have estimated how much new space use information would be added by tracking more animals.
# In the case of this seabird dataset, we estimate that ~98% of the core areas used by this population are captured
# by the sample of 39 individuals. Highly representative!
repr <- repAssess(
tracks    = tracks,
KDE       = KDE$KDE.Surface,
levelUD   = 50,
iteration = 1,
bootTable = FALSE)
# If you desire polygon output of the overlap areas, instead of a gridded surface, you can indicate this using the
# polyOut argument.
Site <- findSite(
KDE = KDE$KDE.Surface,
represent = repr$out,
levelUD = 50,
# popSize = 500,     # 500 individual seabirds breed one the island
polyOut = FALSE)
class(Site)
# This plot shows the minimum estimated number of birds using the space around the breeding island.
Sitemap <- mapSite(Site, colony = colony)
