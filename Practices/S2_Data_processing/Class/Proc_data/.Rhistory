df_int$heading_360 <- convert_bearing(df_int$heading)
# Ensure that DateGMT is in POSIXct format
df <- df %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
df_int <- df_int %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
# Perform a fuzzy join function to find the nearest temperature values based on DateGMT
fuzzy_join_df <- df_int %>%
fuzzy_left_join(df, by = "DateGMT", match_fun = `<=`) %>%
group_by(DateGMT.x) %>%
slice_min(abs(difftime(DateGMT.x, DateGMT.y, units = "mins"))) %>%
ungroup()
# Save the new merged file with the two datasets
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
write.table(fuzzy_join_df,  file="3_L067776.txt", quote=F, row.names=T, sep="\t")
library(lubridate) # for data manipulation
library(geosphere) # for geographical data manipulation
library(sp) # classes and methods for spatial data
library(sf) # binds to 'GDAL' for reading and writing data, to 'GEOS' for geometrical operations, and to 'PROJ' for projection conversions and datum transformation
library(shapefiles) # read and write ESRI shapefiles
library(track2KBA) # functions for preparing and analyzing animal tracking data
library(dplyr) # for data manipulation
library(lubridate) # for dates and time series;
library(ggplot2) # for plotting
library(plyr) # for data manipulation
library(fuzzyjoin) # join two tables based on a function describing whether two vectors are matched or not
# Clean the environment directory;
rm(list=ls())
ls()
# Set the working directory where the code is stored;
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Import raw files (downloaded directly from the device)
f = readLines("1_L91287.csv")
df <- read.csv2(
text   = f,
header = FALSE,
sep = ",",
quote="\"",
dec=",",
skip=7, # here check for the number of rows in your file header
col.names=c("Date","Time","Latitude","Longitude","Altitude","Satellites","HDOP","PDOP","Temperature","Speed","TTFF","SNR","tbd"),
nrows = length(f),
encoding = "latin1",
stringsAsFactors = FALSE)
# Fill the database with the following parameters
df$Date = mdy(df$Date)
df$Bird_ID = "1_L91287"
df$lat_col = 39.4144233 # change the latitude of the colony or population you are study
df$long_col = -9.5047317 # change the longitude of the colony or population you are study
df$DateGMT = as.POSIXct(paste(df$Date, df$Time), format="%Y-%m-%d %H:%M:%S")
head(df)
tail(df)
df$Latitude = as.numeric(as.character(df$Latitude))
df$Longitude = as.numeric(as.character(df$Longitude))
df$lat_col = as.numeric(as.character(df$lat_col))
df$long_col = as.numeric(as.character(df$long_col))
# Compute some other metrics that can be useful in the data cleaning or further in the analysis
df$dist_col = distGeo(df[,c("Longitude","Latitude")], df[,c("long_col","lat_col")])/1000 # in km, but you can change the data format
df$COL = ifelse( df$dist_col < 1, "colony", "sea" ) # in km
df$heading = bearing(df[,c("Longitude","Latitude")], df[,c("long_col","lat_col")])
# Function to convert bearing angle from -180:180 to 0:360
convert_bearing <- function(angle) {
ifelse(angle < 0, angle + 360, angle)
}
# Apply the conversion to the 'heading' column
df$heading_360 <- convert_bearing(df$heading)
head(df)
# Save the interpolated data in a different working directory
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data")
# Export the new data into a tab delimited *.txt
write.table(df, file="1_L91287.txt", quote=F, row.names=F, sep="\t")
# Define and project the coordinate system of the dataframe you are working one and export it as a KML file
df1 = df
coordinates(df1) = c("Longitude", "Latitude")
proj4string(df1) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
df1 = spTransform(df1, CRS("+proj=longlat +datum=WGS84"))
crs.WGS84 = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
df1_sf <- st_as_sf(df1, coords = c("Longitude", "Latitude"))
st_write(df1_sf, "1_L91287", driver = "KML")
# Export to a shapefile format to open it in a GIS software
st_write(df1_sf, "1_L91287.shp")
# GPS data interpolation by a defined time period
df$DateGMT<-as.POSIXct(df$DateGMT, "%Y-%m-%d %H:%M:%S") # ensure that DateGMT is in POSIXct format
par(mfrow=c(2,2), las=1)
plot(df$Longitude, df$Latitude, asp=1, type="b", main="Original_trip")
plot(df$DateGMT, df$Latitude, type="b", main="Original_Lat")
# Interpolate a track by a defined time interval
newdates<-seq(df$DateGMT[1], df$DateGMT[nrow(df)], by=60*10) # set the number of minutes
df_int<-data.frame(Latitude=approx(df$DateGMT, df$Latitude, xout = newdates)$y)
df_int$Longitude<-approx(df$DateGMT, df$Longitude, xout = newdates)$y
# List all .txt files in a predefined working directory
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
txt_files <- list.files(pattern = "\\.txt$")
# Read and merge all the txt files into one data frame
merged_data <- do.call(rbind, lapply(txt_files, read.table, header = TRUE, sep = "\t", stringsAsFactors = FALSE))
# Save the merged data into a new file
write.table(merged_data, "merged_data.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("merged_data.txt", header = T, sep="\t")
head(data)
# Plot the trips for each bird;
ggplot(merged_data, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
data = read.table("merged_data.txt", header = T, sep="\t")
head(data)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
data = read.table("merged_data.txt", header = T, sep="\t")
head(data)
# Plot the trips for each bird;
ggplot(merged_data, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
# Plot the trips for each bird;
ggplot(data, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
merged_data_clean = read.table("merged_data.txt", header = T, sep="\t")
head(merged_data_clean)
# Plot the trips for each bird;
ggplot(merged_data_clean, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
merged_data_clean$DateGMT <- as.POSIXct(merged_data_clean$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
View(merged_data_clean)
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
merged_data_clean = read.table("merged_data.txt", header = T, sep="\t")
head(merged_data_clean)
# Plot the trips for each bird;
ggplot(merged_data_clean, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
merged_data_clean = read.table("merged_data.txt", header = T, sep="\t")
head(merged_data_clean)
# Plot the trips for each bird;
ggplot(merged_data_clean, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
# Summary stats to check for errors on your dataset
data_trip_char = ddply(data, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(merged_data_clean)
merged_data_clean$DateGMT <- as.POSIXct(merged_data_clean$DateGMT, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
View(merged_data_clean)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
merged_data_clean = read.table("merged_data.txt", header = T, sep="\t")
head(merged_data_clean)
# Plot the trips for each bird;
ggplot(merged_data_clean, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data_clean, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
merged_data_clean = read.table("merged_data.txt", header = T, sep="\t")
head(merged_data_clean)
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data_clean, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
write.table(data_trip_char, file="birds_chars_merged_data.txt", quote=F, row.names=F, sep="\t") # export the new data into a tab delimited *.txt
library(lubridate) # for data manipulation
library(geosphere) # for geographical data manipulation
library(sp) # classes and methods for spatial data
library(sf) # binds to 'GDAL' for reading and writing data, to 'GEOS' for geometrical operations, and to 'PROJ' for projection conversions and datum transformation
library(shapefiles) # read and write ESRI shapefiles
library(track2KBA) # functions for preparing and analyzing animal tracking data
library(dplyr) # for data manipulation
library(lubridate) # for dates and time series;
library(ggplot2) # for plotting
library(plyr) # for data manipulation
library(fuzzyjoin) # join two tables based on a function describing whether two vectors are matched or not
# Clean the environment directory;
rm(list=ls())
ls()
# Set the working directory where the code is stored;
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Import raw files (downloaded directly from the device)
f = readLines("6_LV22760.csv")
df <- read.csv2(
text   = f,
header = FALSE,
sep = ",",
quote="\"",
dec=",",
skip=7, # here check for the number of rows in your file header
col.names=c("Date","Time","Latitude","Longitude","Altitude","Satellites","HDOP","PDOP","Temperature","Speed","TTFF","SNR","tbd"),
nrows = length(f),
encoding = "latin1",
stringsAsFactors = FALSE)
# Fill the database with the following parameters
df$Date = mdy(df$Date)
df$Bird_ID = "6_LV22760"
df$lat_col = 39.4144233 # change the latitude of the colony or population you are study
df$long_col = -9.5047317 # change the longitude of the colony or population you are study
df$DateGMT = as.POSIXct(paste(df$Date, df$Time), format="%Y-%m-%d %H:%M:%S")
head(df)
tail(df)
df$Latitude = as.numeric(as.character(df$Latitude))
df$Longitude = as.numeric(as.character(df$Longitude))
df$lat_col = as.numeric(as.character(df$lat_col))
df$long_col = as.numeric(as.character(df$long_col))
# Compute some other metrics that can be useful in the data cleaning or further in the analysis
df$dist_col = distGeo(df[,c("Longitude","Latitude")], df[,c("long_col","lat_col")])/1000 # in km, but you can change the data format
df$COL = ifelse( df$dist_col < 1, "colony", "sea" ) # in km
df$heading = bearing(df[,c("Longitude","Latitude")], df[,c("long_col","lat_col")])
# Function to convert bearing angle from -180:180 to 0:360
convert_bearing <- function(angle) {
ifelse(angle < 0, angle + 360, angle)
}
# Apply the conversion to the 'heading' column
df$heading_360 <- convert_bearing(df$heading)
head(df)
# Save the interpolated data in a different working directory
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data")
# Export the new data into a tab delimited *.txt
write.table(df, file="6_LV22760.txt", quote=F, row.names=F, sep="\t")
# Define and project the coordinate system of the dataframe you are working one and export it as a KML file
df1 = df
coordinates(df1) = c("Longitude", "Latitude")
proj4string(df1) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
df1 = spTransform(df1, CRS("+proj=longlat +datum=WGS84"))
crs.WGS84 = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
df1_sf <- st_as_sf(df1, coords = c("Longitude", "Latitude"))
st_write(df1_sf, "6_LV22760", driver = "KML")
# Export to a shapefile format to open it in a GIS software
st_write(df1_sf, "6_LV22760.shp")
# GPS data interpolation by a defined time period
df$DateGMT<-as.POSIXct(df$DateGMT, "%Y-%m-%d %H:%M:%S") # ensure that DateGMT is in POSIXct format
par(mfrow=c(2,2), las=1)
plot(df$Longitude, df$Latitude, asp=1, type="b", main="Original_trip")
plot(df$DateGMT, df$Latitude, type="b", main="Original_Lat")
# Interpolate a track by a defined time interval
newdates<-seq(df$DateGMT[1], df$DateGMT[nrow(df)], by=60*10) # set the number of minutes
df_int<-data.frame(Latitude=approx(df$DateGMT, df$Latitude, xout = newdates)$y)
df_int$Longitude<-approx(df$DateGMT, df$Longitude, xout = newdates)$y
df_int$DateGMT<-newdates
plot(df_int$Longitude, df_int$Latitude, asp=1, type="b", pch="+", cex=.8, col=2, main="Interpolated_trip")
plot(df_int$DateGMT, df_int$Latitude, col=2, pch="+", cex=.8, main="10 min interpolation (60 * 10 sec)")
# Fill interpolated data with the original data
df_int$Bird_ID = "6_LV22760"
df_int$lat_col = 39.4144233 # change the latitude of the colony or population you are study
df_int$long_col = -9.5047317 # change the longitude of the colony or population you are study
df_int$Latitude = as.numeric(as.character(df_int$Latitude))
df_int$Longitude = as.numeric(as.character(df_int$Longitude))
df_int$lat_col = as.numeric(as.character(df_int$lat_col))
df_int$long_col = as.numeric(as.character(df_int$long_col))
# Compute the same metrics as before for the interpolated data
df_int$dist_col = distGeo(df_int[,c("Longitude","Latitude")], df_int[,c("long_col","lat_col")])/1000 # in km, but you can change the data format
df_int$COL = ifelse( df_int$dist_col < 1, "colony", "sea" ) # in km
df_int$heading = bearing(df_int[,c("Longitude","Latitude")], df_int[,c("long_col","lat_col")])
# Function to convert bearing angle from -180:180 to 0:360
convert_bearing <- function(angle) {
ifelse(angle < 0, angle + 360, angle)
}
# Apply the conversion to the 'heading' column
df_int$heading_360 <- convert_bearing(df_int$heading)
# Ensure that DateGMT is in POSIXct format
df <- df %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
df_int <- df_int %>%
mutate(DateGMT = as.POSIXct(DateGMT, format="%Y-%m-%d %H:%M:%S"))
# Perform a fuzzy join function to find the nearest temperature values based on DateGMT
fuzzy_join_df <- df_int %>%
fuzzy_left_join(df, by = "DateGMT", match_fun = `<=`) %>%
group_by(DateGMT.x) %>%
slice_min(abs(difftime(DateGMT.x, DateGMT.y, units = "mins"))) %>%
ungroup()
# Save the new merged file with the two datasets
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
write.table(fuzzy_join_df,  file="6_LV22760.txt", quote=F, row.names=T, sep="\t")
# List all .txt files in a predefined working directory
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
txt_files <- list.files(pattern = "\\.txt$")
# Read and merge all the txt files into one data frame
merged_data <- do.call(rbind, lapply(txt_files, read.table, header = TRUE, sep = "\t", stringsAsFactors = FALSE))
# Save the merged data into a new file
write.table(merged_data, "merged_data.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
merged_data_clean = read.table("merged_data.txt", header = T, sep="\t")
head(merged_data_clean)
# Plot the trips for each bird;
ggplot(merged_data_clean, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data_clean, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
# Import interpolated merged data
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
merged_data_clean = read.table("merged_data.txt", header = T, sep="\t")
head(merged_data_clean)
# Plot the trips for each bird;
ggplot(merged_data_clean, aes(Longitude, Latitude)) + geom_path(aes(colour = Bird_ID))
# Summary stats to check for errors on your dataset
data_trip_char = ddply(merged_data_clean, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
head(data_trip_char)
write.table(data_trip_char, file="birds_chars_merged_data.txt", quote=F, row.names=F, sep="\t") # export the new data into a tab delimited *.txt
# Summary stats for Bird_ID - useul to check for errors on our dataset
data_trip_char = ddply(merged_data_clean, .(Bird_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
sd_Temperature= sd(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T))
mean_Speed= mean(Speed, na.rm=T,
# Summary stats for Bird_ID - useul to check for errors on our dataset
# Import a testing dataset from the trips
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
# Import a testing dataset from the trips
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class")
# Import a testing dataset from the trips
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/")
trip_data_example = read.table("Teste_trips.txt", header = T, sep="\t")
head(trip_data_example)
# Summary stats for Trip_ID
data_trip_char = ddply(merged_data_clean, .(Bird_ID, Trip_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
sd_Temperature= sd(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T),
sd_Speed= sd(Speed, na.rm=T))
# Summary stats for Trip_ID
data_trip_char = ddply(trip_data_example, .(Bird_ID, Trip_ID), summarise,
min_Date = min(DateGMT, na.rm=T),
max_Date = max(DateGMT, na.rm=T),
min_Latitude = min(Latitude, na.rm=T),
max_Latitude = max(Latitude, na.rm=T),
min_Longitude = min(Longitude, na.rm=T),
max_Longitude = max(Longitude, na.rm=T),
track_dur = round(max(DateGMT)-min(DateGMT)),
total_distance= sum(dist_col, na.rm=T),
max_Dcol = max(dist_col, na.rm=T),
mean_Temperature= mean(Temperature, na.rm=T),
sd_Temperature= sd(Temperature, na.rm=T),
mean_Speed= mean(Speed, na.rm=T),
sd_Speed= sd(Speed, na.rm=T))
head(data_trip_char)
write.table(data_trip_char, file="trips_chars_merged_data.txt", quote=F, row.names=F, sep="\t") # export the new data into a tab delimited *.txt
write.table(data_trip_char, file="trips_chars_example.txt", quote=F, row.names=F, sep="\t") # export the new data into a tab delimited *.txt
compare_means(Age ~ Treatment,  data = Chick_growth,)
# List all .txt files in a predefined working directory
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data/Interpolated_data")
txt_files <- list.files(pattern = "\\.txt$")
# Read and merge all the txt files into one data frame
merged_data <- do.call(rbind, lapply(txt_files, read.table, header = TRUE, sep = "\t", stringsAsFactors = FALSE))
library(lubridate) # for data manipulation
library(geosphere) # for geographical data manipulation
library(sp) # classes and methods for spatial data
library(sf) # binds to 'GDAL' for reading and writing data, to 'GEOS' for geometrical operations, and to 'PROJ' for projection conversions and datum transformation
library(shapefiles) # read and write ESRI shapefiles
library(track2KBA) # functions for preparing and analyzing animal tracking data
library(dplyr) # for data manipulation
library(lubridate) # for dates and time series;
library(ggplot2) # for plotting
library(plyr) # for data manipulation
library(fuzzyjoin) # join two tables based on a function describing whether two vectors are matched or not
# Clean the environment directory;
rm(list=ls())
ls()
# Set the working directory where the code is stored;
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Import raw files (downloaded directly from the device)
f = readLines("S40_LV32981.csv")
df <- read.csv2(
text   = f,
header = FALSE,
sep = ",",
quote="\"",
dec=",",
skip=7, # here check for the number of rows in your file header
col.names=c("Date","Time","Latitude","Longitude","Altitude","Satellites","HDOP","PDOP","Temperature","Speed","TTFF","SNR","tbd"),
nrows = length(f),
encoding = "latin1",
stringsAsFactors = FALSE)
# Fill the database with the following parameters
df$Date = mdy(df$Date)
df$Bird_ID = "S40_LV32981"
df$lat_col = 39.4144233 # change the latitude of the colony or population you are study
df$long_col = -9.5047317 # change the longitude of the colony or population you are study
df$DateGMT = as.POSIXct(paste(df$Date, df$Time), format="%Y-%m-%d %H:%M:%S")
head(df)
tail(df)
df$Latitude = as.numeric(as.character(df$Latitude))
df$Longitude = as.numeric(as.character(df$Longitude))
df$lat_col = as.numeric(as.character(df$lat_col))
df$long_col = as.numeric(as.character(df$long_col))
# Compute some other metrics that can be useful in the data cleaning or further in the analysis
df$dist_col = distGeo(df[,c("Longitude","Latitude")], df[,c("long_col","lat_col")])/1000 # in km, but you can change the data format
df$COL = ifelse( df$dist_col < 1, "colony", "sea" ) # in km
df$heading = bearing(df[,c("Longitude","Latitude")], df[,c("long_col","lat_col")])
# Function to convert bearing angle from -180:180 to 0:360
convert_bearing <- function(angle) {
ifelse(angle < 0, angle + 360, angle)
}
# Apply the conversion to the 'heading' column
df$heading_360 <- convert_bearing(df$heading)
head(df)
# Save the interpolated data in a different working directory
setwd("/Users/jorgepereira/Documents/My Files/Classes/2024_Spatial_Data_Analysis_Ecology_UCA/Session 2/Data_processing/Class/Proc_data")
# Export the new data into a tab delimited *.txt
write.table(df, file="S40_LV32981.txt", quote=F, row.names=F, sep="\t")
# Define and project the coordinate system of the dataframe you are working one and export it as a KML file
df1 = df
coordinates(df1) = c("Longitude", "Latitude")
proj4string(df1) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
df1 = spTransform(df1, CRS("+proj=longlat +datum=WGS84"))
crs.WGS84 = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
df1_sf <- st_as_sf(df1, coords = c("Longitude", "Latitude"))
st_write(df1_sf, "S40_LV32981.kml", driver = "KML")
# Export to a shapefile format to open it in a GIS software
st_write(df1_sf, "6_LV22760.shp")
# GPS data interpolation by a defined time period
df$DateGMT<-as.POSIXct(df$DateGMT, "%Y-%m-%d %H:%M:%S") # ensure that DateGMT is in POSIXct format
par(mfrow=c(2,2), las=1)
plot(df$Longitude, df$Latitude, asp=1, type="b", main="Original_trip")
plot(df$DateGMT, df$Latitude, type="b", main="Original_Lat")
# Interpolate a track by a defined time interval
newdates<-seq(df$DateGMT[1], df$DateGMT[nrow(df)], by=60*10) # set the number of minutes
df_int<-data.frame(Latitude=approx(df$DateGMT, df$Latitude, xout = newdates)$y)
df_int$Longitude<-approx(df$DateGMT, df$Longitude, xout = newdates)$y
df_int$DateGMT<-newdates
plot(df_int$Longitude, df_int$Latitude, asp=1, type="b", pch="+", cex=.8, col=2, main="Interpolated_trip")
plot(df_int$DateGMT, df_int$Latitude, col=2, pch="+", cex=.8, main="10 min interpolation (60 * 10 sec)")
